import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../../models/category_model.dart';
import '../../models/product_model.dart';
import '../../providers/category_provider.dart';
import '../../providers/product_provider.dart';
import '../../providers/user_provider.dart';
import '../../widgets/connectivity_wrapper.dart';

class BulkAddProductsScreen extends StatefulWidget {
  const BulkAddProductsScreen({super.key});

  @override
  State<BulkAddProductsScreen> createState() => _BulkAddProductsScreenState();
}

class ProductEntry {
  final TextEditingController nameController = TextEditingController();
  final TextEditingController unitController = TextEditingController();
  final TextEditingController purchasePriceController = TextEditingController();
  final TextEditingController salePriceController = TextEditingController();
  final TextEditingController currentStockController = TextEditingController();
  final TextEditingController minimumStockController = TextEditingController();
  final TextEditingController brandController = TextEditingController();
  final TextEditingController barcodeController = TextEditingController();

  void dispose() {
    nameController.dispose();
    unitController.dispose();
    purchasePriceController.dispose();
    salePriceController.dispose();
    currentStockController.dispose();
    minimumStockController.dispose();
    brandController.dispose();
    barcodeController.dispose();
  }
}

class _BulkAddProductsScreenState extends State<BulkAddProductsScreen> {
  final _formKey = GlobalKey<FormState>();

  // Common fields for all products
  String? _selectedCategoryId;
  String? _selectedVendorId;

  // List of product entries
  List<ProductEntry> _productEntries = [ProductEntry()];

  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _initializeProviders();
    });
  }

  @override
  void dispose() {
    for (var entry in _productEntries) {
      entry.dispose();
    }
    super.dispose();
  }

  void _initializeProviders() async {
    final categoryProvider = Provider.of<CategoryProvider>(
      context,
      listen: false,
    );
    final userProvider = Provider.of<UserProvider>(context, listen: false);

    try {
      categoryProvider.startListening();
      await userProvider.loadUsersByRole('vendor');
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error loading data: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _addProductEntry() {
    setState(() {
      _productEntries.add(ProductEntry());
    });
  }

  void _removeProductEntry(int index) {
    if (_productEntries.length > 1) {
      setState(() {
        _productEntries[index].dispose();
        _productEntries.removeAt(index);
      });
    }
  }

  List<CategoryModel> _getProductCategories(List<CategoryModel> allCategories) {
    final activeCategories = allCategories.where((c) => c.isActive).toList();
    return activeCategories.where((category) {
      final hasSubcategories = allCategories.any(
        (c) => c.parentCategory == category.id,
      );
      return !hasSubcategories;
    }).toList();
  }

  Future<void> _saveBulkProducts() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    if (_selectedCategoryId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select a category'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    if (_selectedVendorId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select a vendor'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    final productProvider = Provider.of<ProductProvider>(
      context,
      listen: false,
    );

    try {
      List<ProductModel> products = [];

      for (var entry in _productEntries) {
        final product = ProductModel(
          id: '', // Will be generated by Firestore
          name: entry.nameController.text.trim(),
          unit: entry.unitController.text.trim(),
          purchasePrice: double.parse(entry.purchasePriceController.text),
          salePrice: double.parse(entry.salePriceController.text),
          currentStock: double.parse(entry.currentStockController.text),
          categoryId: _selectedCategoryId!,
          vendorId: _selectedVendorId!,
          minimumStockLevel: double.parse(entry.minimumStockController.text),
          createdAt: DateTime.now(),
          isActive: true,
          brand: entry.brandController.text.trim().isEmpty
              ? null
              : entry.brandController.text.trim(),
          barcode: entry.barcodeController.text.trim().isEmpty
              ? null
              : entry.barcodeController.text.trim(),
        );
        products.add(product);
      }

      // Add products one by one
      int successCount = 0;
      List<String> errors = [];

      for (int i = 0; i < products.length; i++) {
        final success = await productProvider.createProduct(products[i]);
        if (success) {
          successCount++;
        } else {
          errors.add('Product ${i + 1}: ${productProvider.error}');
        }
      }

      if (mounted) {
        if (successCount == products.length) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Successfully added $successCount products!'),
              backgroundColor: Colors.green,
            ),
          );
          Navigator.pop(context, true);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(
                'Added $successCount/${products.length} products. ${errors.length} failed.',
              ),
              backgroundColor: Colors.orange,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: $e'), backgroundColor: Colors.red),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return ConnectivityWrapper(
      child: Scaffold(
        backgroundColor: Colors.grey[50],
        appBar: AppBar(
          title: const Text(
            'Bulk Add Products',
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          backgroundColor: Colors.blue[600],
          foregroundColor: Colors.white,
          elevation: 0,
          actions: [
            if (!_isLoading)
              TextButton.icon(
                onPressed: _saveBulkProducts,
                icon: const Icon(Icons.save, color: Colors.white),
                label: const Text(
                  'Save All',
                  style: TextStyle(color: Colors.white),
                ),
              ),
          ],
        ),
        body: _isLoading
            ? const Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(),
                    SizedBox(height: 16),
                    Text('Adding products...'),
                  ],
                ),
              )
            : Form(
                key: _formKey,
                child: Column(
                  children: [
                    // Common Fields Section
                    Container(
                      margin: const EdgeInsets.all(16),
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(12),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.grey.withOpacity(0.1),
                            spreadRadius: 1,
                            blurRadius: 4,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Icon(Icons.settings, color: Colors.blue[600]),
                              const SizedBox(width: 8),
                              const Text(
                                'Common Settings',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 16),

                          // Category Dropdown
                          Consumer<CategoryProvider>(
                            builder: (context, categoryProvider, child) {
                              final categories = _getProductCategories(
                                categoryProvider.categories,
                              );

                              return DropdownButtonFormField<String>(
                                value: _selectedCategoryId,
                                decoration: const InputDecoration(
                                  labelText: 'Category *',
                                  border: OutlineInputBorder(),
                                  prefixIcon: Icon(Icons.category),
                                ),
                                items: categories.map((category) {
                                  return DropdownMenuItem(
                                    value: category.id,
                                    child: Text(category.name),
                                  );
                                }).toList(),
                                onChanged: (value) {
                                  setState(() {
                                    _selectedCategoryId = value;
                                  });
                                },
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Please select a category';
                                  }
                                  return null;
                                },
                              );
                            },
                          ),

                          const SizedBox(height: 16),

                          // Vendor Dropdown
                          Consumer<UserProvider>(
                            builder: (context, userProvider, child) {
                              final vendors = userProvider.getUsersByRole('vendor');

                              return DropdownButtonFormField<String>(
                                value: _selectedVendorId,
                                decoration: const InputDecoration(
                                  labelText: 'Vendor *',
                                  border: OutlineInputBorder(),
                                  prefixIcon: Icon(Icons.business),
                                ),
                                items: vendors.map((vendor) {
                                  return DropdownMenuItem(
                                    value: vendor.id,
                                    child: Text(vendor.name),
                                  );
                                }).toList(),
                                onChanged: (value) {
                                  setState(() {
                                    _selectedVendorId = value;
                                  });
                                },
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Please select a vendor';
                                  }
                                  return null;
                                },
                              );
                            },
                          ),
                        ],
                      ),
                    ),

                    // Products List Header
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16),
                      child: Row(
                        children: [
                          Icon(Icons.inventory, color: Colors.blue[600]),
                          const SizedBox(width: 8),
                          const Text(
                            'Products',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const Spacer(),
                          ElevatedButton.icon(
                            onPressed: _addProductEntry,
                            icon: const Icon(Icons.add),
                            label: const Text('Add Product'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.green,
                              foregroundColor: Colors.white,
                            ),
                          ),
                        ],
                      ),
                    ),

                    const SizedBox(height: 8),

                    // Products List
                    Expanded(
                      child: ListView.builder(
                        padding: const EdgeInsets.symmetric(horizontal: 16),
                        itemCount: _productEntries.length,
                        itemBuilder: (context, index) {
                          return _buildProductEntryCard(index);
                        },
                      ),
                    ),
                  ],
                ),
              ),
      ),
    );
  }

  Widget _buildProductEntryCard(int index) {
    final entry = _productEntries[index];

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header with product number and remove button
          Row(
            children: [
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: 12,
                  vertical: 6,
                ),
                decoration: BoxDecoration(
                  color: Colors.blue[100],
                  borderRadius: BorderRadius.circular(20),
                ),
                child: Text(
                  'Product ${index + 1}',
                  style: TextStyle(
                    color: Colors.blue[800],
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
              const Spacer(),
              if (_productEntries.length > 1)
                IconButton(
                  onPressed: () => _removeProductEntry(index),
                  icon: const Icon(Icons.delete, color: Colors.red),
                  tooltip: 'Remove Product',
                ),
            ],
          ),

          const SizedBox(height: 16),

          // Product Name
          TextFormField(
            controller: entry.nameController,
            decoration: const InputDecoration(
              labelText: 'Product Name *',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.shopping_bag),
            ),
            validator: (value) {
              if (value == null || value.trim().isEmpty) {
                return 'Please enter product name';
              }
              return null;
            },
          ),

          const SizedBox(height: 12),

          // Unit and Brand Row
          Row(
            children: [
              Expanded(
                child: TextFormField(
                  controller: entry.unitController,
                  decoration: const InputDecoration(
                    labelText: 'Unit *',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.straighten),
                    hintText: 'kg, pcs, ltr',
                  ),
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Please enter unit';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: TextFormField(
                  controller: entry.brandController,
                  decoration: const InputDecoration(
                    labelText: 'Brand',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.branding_watermark),
                  ),
                ),
              ),
            ],
          ),

          const SizedBox(height: 12),

          // Purchase Price and Sale Price Row
          Row(
            children: [
              Expanded(
                child: TextFormField(
                  controller: entry.purchasePriceController,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(
                    labelText: 'Purchase Price *',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.attach_money),
                  ),
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Please enter purchase price';
                    }
                    if (double.tryParse(value) == null) {
                      return 'Please enter valid price';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: TextFormField(
                  controller: entry.salePriceController,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(
                    labelText: 'Sale Price *',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.sell),
                  ),
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Please enter sale price';
                    }
                    if (double.tryParse(value) == null) {
                      return 'Please enter valid price';
                    }
                    return null;
                  },
                ),
              ),
            ],
          ),

          const SizedBox(height: 12),

          // Current Stock and Minimum Stock Row
          Row(
            children: [
              Expanded(
                child: TextFormField(
                  controller: entry.currentStockController,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(
                    labelText: 'Current Stock *',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.inventory_2),
                  ),
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Please enter current stock';
                    }
                    if (double.tryParse(value) == null) {
                      return 'Please enter valid stock';
                    }
                    return null;
                  },
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: TextFormField(
                  controller: entry.minimumStockController,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(
                    labelText: 'Minimum Stock *',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.warning),
                  ),
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Please enter minimum stock';
                    }
                    if (double.tryParse(value) == null) {
                      return 'Please enter valid stock';
                    }
                    return null;
                  },
                ),
              ),
            ],
          ),

          const SizedBox(height: 12),

          // Barcode
          TextFormField(
            controller: entry.barcodeController,
            decoration: const InputDecoration(
              labelText: 'Barcode',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.qr_code),
            ),
          ),
        ],
      ),
    );
  }
}
